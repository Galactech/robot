/* Copyright (c) 2019 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.firstComp;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import java.util.List;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;

/**
 * This 2022-2023 OpMode illustrates the basics of using the TensorFlow Object Detection API to
 * determine which image is being presented to the robot.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list.
 *
 * IMPORTANT: In order to use this OpMode, you need to obtain your own Vuforia license key as
 * is explained below.
 */

@Autonomous(name = "Auto2Test")

public class Auto2Test extends LinearOpMode {
    
    private DcMotor frontLeftDrive = null;
    private DcMotor frontRightDrive = null;
    private DcMotor backLeftDrive = null;
    private DcMotor backRightDrive = null;
    
    private DcMotor armBase = null;
    
    private Servo claw = null;
    private Servo clawSpin = null;
    private Servo leftArm = null;
    private Servo rightArm = null;
    
    private int frontLeftPos;
    private int frontRightPos;
    private int backLeftPos;
    private int backRightPos;
    
    private int armPos;

    /*
     * Specify the source for the Tensor Flow Model.
     * If the TensorFlowLite object model is included in the Robot Controller App as an "asset",
     * the OpMode must to load it using loadModelFromAsset().  However, if a team generated model
     * has been downloaded to the Robot Controller's SD FLASH memory, it must to be loaded using loadModelFromFile()
     * Here we assume it's an Asset.    Also see method initTfod() below .
     */
    private static final String TFOD_MODEL_FILE = "RedConeTest.tflite";
    // private static final String TFOD_MODEL_FILE  = "/sdcard/FIRST/tflitemodels/CustomTeamModel.tflite";


    private static final String[] LABELS = {
            "3 red cones",
            "4 red cones",
            "5 red cones"
    };

    /*
     * IMPORTANT: You need to obtain your own license key to use Vuforia. The string below with which
     * 'parameters.vuforiaLicenseKey' is initialized is for illustration only, and will not function.
     * A Vuforia 'Development' license key, can be obtained free of charge from the Vuforia developer
     * web site at https://developer.vuforia.com/license-manager.
     *
     * Vuforia license keys are always 380 characters long, and look as if they contain mostly
     * random data. As an example, here is a example of a fragment of a valid key:
     *      ... yIgIzTqZ4mWjk9wd3cZO9T1axEqzuhxoGlfOOI2dRzKS4T0hQ8kT ...
     * Once you've obtained a license key, copy the string from the Vuforia web site
     * and paste it in to your code on the next line, between the double quotes.
     */
    private static final String VUFORIA_KEY = "ATzl1fr/////AAABmfX4/a94rUj3ouzIGP3Vqxk9yGyZvy+HYxTFoqsMbAxX1+CIwLU2+refuksPU/5L2otwxB3PqLFRGVqklWHqIJtthvU74FI6EZnXyxEjS2fZRLBAG2ZIndEUvoisTiNs1dPi5MlM3GKIx38EA9l7cer8adOKBWHN/ER1TZSO/J6neFPGLPkCGJUCIVHsOzU43JujKmT1owQ1c1NBX3h3FCUYzw1EXG2wY8DVS37sxYrse6tb2xI6oLfbuNZuNM0B6rG85uMTclewXBiERZytNQkcUt7ZBTnHCyrkQaRmTqXfIidccXn63paKwGEuIceCdLzPxhHZ5lf8KoXiuzFHcjfqqkRHhJdI3BDMDrnyyLOh";

    /**
     * {@link #vuforia} is the variable we will use to store our instance of the Vuforia
     * localization engine.
     */
    private VuforiaLocalizer vuforia;

    /**
     * {@link #tfod} is the variable we will use to store our instance of the TensorFlow Object
     * Detection engine.
     */
    private TFObjectDetector tfod;
    
    boolean rowAdjusted = false;
    boolean colAdjusted = false;
    
    double col = 0;
    double row = 0;
    double width  = 0;
    double height = 0;
    
    double armBasePower = 0;
    
    double left = 0;
    double right = 0;
    double top = 0;
    double bottom = 0;

    double vPosFrontLeft = 0;
    double vPosFrontRight = 0;
    double vPosBackLeft = 0;
    double vPosBackRight = 0;
    
    List<Recognition> updatedRecognitions;
    
    

    @Override
    public void runOpMode() {            
        
        frontLeftDrive  = hardwareMap.get(DcMotor.class, "Frontleft");
        frontRightDrive = hardwareMap.get(DcMotor.class, "Frontright");
        backLeftDrive  = hardwareMap.get(DcMotor.class, "Backleft");
        backRightDrive = hardwareMap.get(DcMotor.class, "Backright");
        
        armBase  = hardwareMap.get(DcMotor.class, "armbase");
        
        claw  = hardwareMap.get(Servo.class, "claw");
        clawSpin = hardwareMap.get(Servo.class, "clawspin");
        leftArm  = hardwareMap.get(Servo.class, "leftarm");
        rightArm = hardwareMap.get(Servo.class, "rightarm");
        
        frontLeftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontRightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backLeftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backRightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        
        frontLeftDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        frontRightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        backRightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        backLeftDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        
        claw.setPosition(0.85);
        rightArm.setPosition(1);
        leftArm.setPosition(0);
        clawSpin.setPosition(0.07);
        
        frontLeftPos = 0;
        frontRightPos = 0;
        backLeftPos = 0;
        backRightPos = 0;
        armPos = 0;
        
        telemetry.addData("test", System.currentTimeMillis());      
        
        // The TFObjectDetector uses the camera frames from the VuforiaLocalizer, so we create that
        // first.
        initVuforia();
        initTfod();

        /**
         * Activate TensorFlow Object Detection before we wait for the start command.
         * Do it here so that the Camera Stream window will have the TensorFlow annotations visible.
         **/
        if (tfod != null) {
            tfod.activate();

            // The TensorFlow software will scale the input images from the camera to a lower resolution.
            // This can result in lower detection accuracy at longer distances (> 55cm or 22").
            // If your target is at distance greater than 50 cm (20") you can increase the magnification value
            // to artificially zoom in to the center of image.  For best results, the "aspectRatio" argument
            // should be set to the value of the images used to create the TensorFlow Object Detection model
            // (typically 16/9).
            tfod.setZoom(1.0, 16.0/9.0);
        }

        /** Wait for the game to begin */
        telemetry.addData(">", "Press Play to start op mode");
        telemetry.update();
        waitForStart();
        if (opModeIsActive()) {
            long start = System.currentTimeMillis();
            long end = start + 5 * 1000;
            telemetry.addData("End", end);
            telemetry.update();
            boolean exitFromMainLoop = false;
            while (opModeIsActive()) {
                
                if (tfod != null) {
                    // getUpdatedRecognitions() will return null if no new information is available since
                    // the last time that call was made.
                    updatedRecognitions = tfod.getUpdatedRecognitions();
                    if (updatedRecognitions != null) {
                        
                        telemetry.addData("# Objects Detected", updatedRecognitions.size());

                        //recognizeRed5Cone();
                        //if (colAdjusted && rowAdjusted) {
                            cycleTopCone();
                            break;
                        //}
                        
                    } 
                }

                //Get this from Pranav
                vPosFrontLeft = frontLeftDrive.getCurrentPosition();
                vPosFrontRight = frontRightDrive.getCurrentPosition();
                vPosBackRight = backRightDrive.getCurrentPosition();
                vPosBackLeft = backLeftDrive.getCurrentPosition();
                

                /*telemetry.addData("Vehicle Front Left", vPosFrontLeft);
                telemetry.addData("Vehicle Front Right", vPosFrontRight);
                telemetry.addData("Vehicle Back Left", vPosBackLeft);
                telemetry.addData("Vehicle Back Right", vPosBackRight);
                telemetry.update();*/

            }
        }
    }

    //List <String> moveFlow = new List<String>(); //= {"F:1,B:1","F:1,B:1"};
    String[] moveFlow;

    private void AutomMove(String movepath)
    {
        for (String move: moveFlow) {

            String[] path = move.split("[,]", 0);
            for(String dirpos: path) {

                //String[] path = dirpos.split(":", 0);                
                MoveToTile(2, "");

            }
        }
    }

    
    //When the battery is good
    private void RoboHappy()
    {
        telemetry.addData("I am Happy!", "I am Happy!");        
    }

    //When the battery is low
    private void RoboSad()
    {
        telemetry.addData("I am not Happy!", "I am not Happy!");
    }
    

    private void getSensor()
    {
        //Check if Senor has some data
    }


    private void MoveToTile(int numberofTiles, String direction)
    {

        //Front    
        if(direction == "F")
        {}

        //Back
        if(direction == "B")
        {}

        //Left 
        if(direction == "L")
        {}

        //Right
        if(direction == "R")
        {}

        //Left Diag
        if(direction == "LD")
        {}

        //Right Diag
        if(direction == "RD")
        {}        

    }


    /**
     * Initialize the Vuforia localization engine.
     */
    private void initVuforia() {
        /*
         * Configure Vuforia by creating a Parameter object, and passing it to the Vuforia engine.
         */
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        parameters.vuforiaLicenseKey = VUFORIA_KEY;
        parameters.cameraName = hardwareMap.get(WebcamName.class, "Webcam 1");

        //  Instantiate the Vuforia engine
        vuforia = ClassFactory.getInstance().createVuforia(parameters);
    }

    /**
     * Initialize the TensorFlow Object Detection engine.
     */
    private void initTfod() {
        int tfodMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(
            "tfodMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        TFObjectDetector.Parameters tfodParameters = new TFObjectDetector.Parameters(tfodMonitorViewId);
        tfodParameters.minResultConfidence = 0.6f;
        tfodParameters.isModelTensorFlow2 = true;
        tfodParameters.inputSize = 300;
        tfod = ClassFactory.getInstance().createTFObjectDetector(tfodParameters, vuforia);

        // Use loadModelFromAsset() if the TF Model is built in as an asset by Android Studio
        // Use loadModelFromFile() if you have downloaded a custom team model to the Robot Controller's FLASH.
        //tfod.loadModelFromAsset(TFOD_MODEL_ASSET, LABELS);
        tfod.loadModelFromFile(TFOD_MODEL_FILE, LABELS);
    }
    
    private void drive(int frontLeftTarget, int frontRightTarget, int backLeftTarget, int backRightTarget, double speed) {
        frontLeftPos += frontLeftTarget;
        frontRightPos += frontRightTarget;
        backLeftPos += backLeftTarget;
        backRightPos += backRightTarget;
        
        frontLeftDrive.setTargetPosition(frontLeftPos);
        frontRightDrive.setTargetPosition(frontRightPos);
        backLeftDrive.setTargetPosition(backLeftPos);
        backRightDrive.setTargetPosition(backRightPos);
        
        frontLeftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        frontRightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backLeftDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        backRightDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
        frontLeftDrive.setPower(speed);
        frontRightDrive.setPower(speed);
        backLeftDrive.setPower(speed);
        backRightDrive.setPower(speed);
        
        while(opModeIsActive() && frontLeftDrive.isBusy() && frontRightDrive.isBusy() && backLeftDrive.isBusy() && backRightDrive.isBusy()) {
            idle();
        }
    }
    
    // double expectedRowPosition = 289;
    // double expectedColPosition = 210;  
    
    double expectedRowPosition = 220;
    double expectedColPosition = 230;  
    
    double rowAdjustor = expectedRowPosition - 5; 
    double colAdjustor = expectedColPosition - 5; 

    int rowrevserAdjustor = -2;
    int rowforwardAdjustor = 2;

    int colleftAdjustor = -2;
    int colrightAdjustor = 2;
    
    private void center(){

        //ROW Start 

        //When the vehicle is moved forward get it back to align center
        if (row > expectedRowPosition) {
            drive(rowrevserAdjustor, rowrevserAdjustor, rowrevserAdjustor, rowrevserAdjustor, 0.3);
            telemetry.update(); 
        } 

        //If the vehicle is in the expected Row range   
        if(row > rowAdjustor && row < expectedRowPosition){        
        
            rowAdjusted = true;
        }
        
        //When the vehicle is moved back get it front to align center
        if (!rowAdjusted && row < rowAdjustor) {
            drive(rowforwardAdjustor, rowforwardAdjustor, rowforwardAdjustor, rowforwardAdjustor, 0.3);
            telemetry.update(); 
        } 
        
          //If the vehicle is in the expected Row range   
        if(row > rowAdjustor && row < expectedRowPosition){        
        
            rowAdjusted = true;
        }
        
        //ROW End 


        //COL Start 


         //When the vehicle is moved forward get it back to align center
        if (col > expectedColPosition) {
            drive(-colleftAdjustor, colleftAdjustor, colleftAdjustor, -colleftAdjustor, 0.3);
            telemetry.update(); 
        } 

        //If the vehicle is in the expected Col range   
        if(col > colAdjustor && col < expectedColPosition){        
        
            colAdjusted = true;
        }
        
        //When the vehicle is moved back get it front to align center
        if (!colAdjusted && col < colAdjustor) {
            drive(-colrightAdjustor, colrightAdjustor, colrightAdjustor, -colrightAdjustor, 0.3);
            telemetry.update(); 
        } 
        
          //If the vehicle is in the expected Col range   
        if(col > colAdjustor && col < expectedColPosition){        
        
            colAdjusted = true;
        }
        //COL End
        telemetry.update(); 
        armBase.setPower(armBasePower);
    }
    
    String MLLabel = "";
    
    private void recognizeRed5Cone() {
        
        // step through the list of recognitions and display image position/size information for each one
        // Note: "Image number" refers to the randomized image orientation/number
        for (Recognition recognition : updatedRecognitions) {
            col = (recognition.getLeft() + recognition.getRight()) / 2 ;
            row = (recognition.getTop()  + recognition.getBottom()) / 2 ;
            width  = Math.abs(recognition.getRight() - recognition.getLeft()) ;
            height = Math.abs(recognition.getTop()  - recognition.getBottom()) ;

            left = recognition.getLeft();
            right = recognition.getRight();
            top = recognition.getTop();
            bottom = recognition.getBottom();

            MLLabel = "Image" + recognition.getLabel();
            telemetry.addData("Image", "%s (%.0f %% Conf.)", recognition.getLabel(), recognition.getConfidence() * 100 );
            
            telemetry.addData("getLeft", recognition.getLeft());
            telemetry.addData("getRight", recognition.getRight());
            telemetry.addData("getTop", recognition.getTop());
            telemetry.addData("getBottom", recognition.getBottom());
                
            
            //center();
            telemetryOutput("", "");
            if (rowAdjusted && colAdjusted) {
                cycleTopCone();
                break;
            }
        }
    }
    
    double numberofConesStack = 5;

    private void cycleTopCone() {
        //spinclaw
        clawSpin.setPosition(0);
        //clawOpen
        claw.setPosition(0.50);
        //forward
        drive(250, 250, 250, 250, 0.2);
        sleep(1000);
        //turnLeft
        drive(-45, 45, -45, 45, 0.2);
        sleep(500);
        //forward
        drive(32, 32, 32, 32, 0.2);
        sleep(1000);
        //armUp
        armMovementEncoder(-60, 1);
        sleep(1000);
        //servoPosition
        rightArm.setPosition(0.7);
        leftArm.setPosition(0.3);
        sleep(1500);
        //armUp
        armMovementEncoder(-35, 1);
        sleep(1500);
        //turnRight
        drive(45, -45, 45, -45, 0.2);
        sleep(500);
        //clawClose
        claw.setPosition(0.90);
        sleep(500);
        
        //servoPosition
        rightArm.setPosition(1);
        leftArm.setPosition(0);
        sleep(500);
        //back
        drive(-320, -320, -320, -320, 0.2);
        sleep(2000);
        //armdown
        armMovementEncoder(95, 0.2);
        sleep(1000);
        //turnLeft
        drive(-280, 280, -280, 280, 0.2);
        sleep(1000);
        //spinclaw
        clawSpin.setPosition(0.625);
        sleep(500);
        //armallthewayback
        armMovementEncoder(-390, 0.8);
        sleep(500);
        //positionservos
        rightArm.setPosition(0.57);
        leftArm.setPosition(0.43);
        sleep(1000);
        //turnLeft
        drive(-32, 32, -32, 30, 0.2);
        sleep(500);
        //drop
        claw.setPosition(0.50);
        sleep(1000);
        //turnLeft
        drive(-20, 20, -20, 20, 0.2);
        sleep(500);
        //servocompress
        rightArm.setPosition(1);
        leftArm.setPosition(0);
        sleep(1000);
        //armdown
        armMovementEncoder(390, 0.2);
        sleep(1000);
        //back
        drive(30, 30, 30, 30, 0.2);
        sleep(2000);
        //turnright
        drive(350, -350, -350, -350, 0.2);
        sleep(2000);
        telemetry.addData("end", "end");
        numberofConesStack--;

    }
    
    private void armMovementEncoder(int armTarget, double speed) {

        armPos += armTarget;        
        armBase.setTargetPosition(armPos);        
        armBase.setMode(DcMotor.RunMode.RUN_TO_POSITION);        
        armBase.setPower(speed);        
        while(opModeIsActive() && armBase.isBusy()) {
            idle();
        }

    }
    
    private void telemetryOutput(String param1, String param2) {
        telemetry.addData(param1, param2);
        telemetry.addData(MLLabel, MLLabel);
        telemetry.addData("- Position (Row/Col)","%.0f / %.0f", row, col);
        telemetry.addData("- Size (Width/Height)","%.0f / %.0f", width, height);
        telemetry.addData("- left/right ","%.0f / %.0f", left, right);
        telemetry.addData("- top/bottom","%.0f / %.0f", top, bottom);
        telemetry.addData("","");
        telemetry.update();
    }
}
